using NUnit.Framework;
using Unity.Burst;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities.CodeGen.Tests.LambdaJobs.Infrastructure;
using Unity.Entities.CodeGeneratedJobForEach;
using Unity.Jobs;

namespace Unity.Entities.CodeGen.Tests
{
	[TestFixture]
	public class EntitiesForEachCapturing : IntegrationTest
	{
		private class System : JobComponentSystem
		{
			[BurstCompile(FloatMode = FloatMode.Deterministic, FloatPrecision = FloatPrecision.High, CompileSynchronously = true)]
			private struct System_OnUpdate_LambdaJob0 : IJobChunk
			{
				private struct ElementProviders
				{
					public struct Runtimes
					{
						public ElementProvider_IComponentData<Translation>.Runtime runtime0;

						public ElementProvider_IComponentData<Acceleration>.Runtime runtime1;

						public ElementProvider_EntityInQueryIndex.Runtime runtime2;

						public ElementProvider_Entity.Runtime runtime3;

						public ElementProvider_DynamicBuffer<MyBufferInt>.Runtime runtime4;
					}

					private ElementProvider_IComponentData<Translation> element0;

					[ReadOnly]
					private ElementProvider_IComponentData<Acceleration> element1;

					[ReadOnly]
					private ElementProvider_EntityInQueryIndex element2;

					[ReadOnly]
					private ElementProvider_Entity element3;

					private ElementProvider_DynamicBuffer<MyBufferInt> element4;

					public void ScheduleTimeInitialize(JobComponentSystem jobComponentSystem)
					{
						element0.ScheduleTimeInitialize(jobComponentSystem, isReadOnly: false);
						element1.ScheduleTimeInitialize(jobComponentSystem, isReadOnly: true);
						element2.ScheduleTimeInitialize(jobComponentSystem, isReadOnly: true);
						element3.ScheduleTimeInitialize(jobComponentSystem, isReadOnly: true);
						element4.ScheduleTimeInitialize(jobComponentSystem, isReadOnly: false);
					}

					public Runtimes PrepareToExecuteOnEntitiesInMethod(ref ArchetypeChunk p0, int p1, int p2)
					{
						Runtimes result = default(Runtimes);
						result.runtime0 = element0.PrepareToExecuteOnEntitiesIn(ref p0);
						result.runtime1 = element1.PrepareToExecuteOnEntitiesIn(ref p0);
						result.runtime2 = element2.PrepareToExecuteOnEntitiesIn(ref p0, p1, p2);
						result.runtime3 = element3.PrepareToExecuteOnEntitiesIn(ref p0);
						result.runtime4 = element4.PrepareToExecuteOnEntitiesIn(ref p0);
						return result;
					}
				}

				private ElementProviders _elementProviders;

				[NativeDisableUnsafePtrRestriction]
				private unsafe ElementProviders.Runtimes* _runtimes;

				[ReadOnly]
				[DeallocateOnJobCompletion]
				[NativeDisableContainerSafetyRestriction]
				[NativeDisableUnsafePtrRestriction]
				public NativeArray<float> myCapturedFloats;

				public void ReadFromDisplayClass(ref <>c__DisplayClass0_0 displayClass)
				{
					myCapturedFloats = displayClass.myCapturedFloats;
				}

				public void OriginalLambdaBody(ref Translation translation, in Acceleration acceleration, int entityInQueryIndex, Entity myEntity, DynamicBuffer<MyBufferInt> myBufferInts)
				{
					translation.Value += myCapturedFloats[2] + acceleration.Value + (float)entityInQueryIndex + (float)myEntity.Version + (float)myBufferInts[2].Value;
				}

				public unsafe void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)
				{
					ElementProviders.Runtimes runtimes = _elementProviders.PrepareToExecuteOnEntitiesInMethod(ref chunk, chunkIndex, firstEntityIndex);
					_runtimes = &runtimes;
					IterateEntities(ref chunk, ref *_runtimes);
				}

				public void IterateEntities(ref ArchetypeChunk chunk, ref ElementProviders.Runtimes runtimes)
				{
					int count = chunk.Count;
					for (int i = 0; i != count; i++)
					{
						this.OriginalLambdaBody(ref runtimes.runtime0.For(i), ref runtimes.runtime1.For(i), runtimes.runtime2.For(i), runtimes.runtime3.For(i), runtimes.runtime4.For(i));
					}
				}

				public void ScheduleTimeInitialize(JobComponentSystem jobComponentSystem, ref <>c__DisplayClass0_0 displayClass)
				{
					_elementProviders.ScheduleTimeInitialize(jobComponentSystem);
					ReadFromDisplayClass(ref displayClass);
				}
			}

			private EntityQuery <>System_OnUpdate_LambdaJob0_entityQuery;

			protected override JobHandle OnUpdate(JobHandle inputDeps)
			{
				<>c__DisplayClass0_0 displayClass = default(<>c__DisplayClass0_0);
				displayClass.myCapturedFloats = default(NativeArray<float>);
				ForEachLambdaJobDescription entity = base.Entities;
				System_OnUpdate_LambdaJob0 jobData = default(System_OnUpdate_LambdaJob0);
				jobData.ScheduleTimeInitialize(this, ref displayClass);
				return JobChunkExtensions.Schedule(jobData, <>System_OnUpdate_LambdaJob0_entityQuery, inputDeps);
			}

			public static EntityQuery <>GetEntityQuery_ForSystem_OnUpdate_LambdaJob0_From(ComponentSystemBase componentSystem)
			{
				EntityQueryDesc[] array = new EntityQueryDesc[1];
				EntityQueryDesc entityQueryDesc = array[0] = new EntityQueryDesc();
				entityQueryDesc.All = new ComponentType[4]
				{
					ComponentType.ReadOnly<Velocity>(),
					ComponentType.ReadWrite<Translation>(),
					ComponentType.ReadOnly<Acceleration>(),
					ComponentType.ReadWrite<MyBufferInt>()
				};
				entityQueryDesc.None = new ComponentType[1]
				{
					ComponentType.ReadWrite<Boid>()
				};
				entityQueryDesc.Options = EntityQueryOptions.IncludeDisabled;
				EntityQuery entityQuery = componentSystem.GetEntityQuery(array);
				entityQuery.SetFilterChanged(new ComponentType[1]
				{
					ComponentType.ReadWrite<Translation>()
				});
				return entityQuery;
			}

			protected override void OnCreate()
			{
				<>System_OnUpdate_LambdaJob0_entityQuery = <>GetEntityQuery_ForSystem_OnUpdate_LambdaJob0_From(this);
			}
		}

		[Test]
		public void EntitiesForEachCapturingTest()
		{
			RunTest<System>();
		}
	}
}
