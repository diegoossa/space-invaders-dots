using NUnit.Framework;
using Unity.Burst;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities.CodeGen.Tests.LambdaJobs.Infrastructure;
using Unity.Entities.CodeGeneratedJobForEach;
using Unity.Jobs;
using Unity.Jobs.LowLevel.Unsafe;

namespace Unity.Entities.CodeGen.Tests
{
	[TestFixture]
	public class EntitiesForEachNonCapturing : IntegrationTest
	{
		private class System : JobComponentSystem
		{
			[BurstCompile]
			private struct System_OnUpdate_LambdaJob0 : IJobChunk
			{
				private struct ElementProviders
				{
					public struct Runtimes
					{
						public ElementProvider_IComponentData<Translation>.Runtime runtime0;
					}

					private ElementProvider_IComponentData<Translation> element0;

					public void ScheduleTimeInitialize(JobComponentSystem jobComponentSystem)
					{
						element0.ScheduleTimeInitialize(jobComponentSystem, isReadOnly: false);
					}

					public Runtimes PrepareToExecuteOnEntitiesInMethod(ref ArchetypeChunk p0, int p1, int p2)
					{
						Runtimes result = default(Runtimes);
						result.runtime0 = element0.PrepareToExecuteOnEntitiesIn(ref p0);
						return result;
					}
				}

				private ElementProviders _elementProviders;

				[NativeDisableUnsafePtrRestriction]
				private unsafe ElementProviders.Runtimes* _runtimes;

				private static InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate s_RunWithoutJobSystemDelegateFieldNoBurst;

				private static InternalCompilerInterface.JobChunkRunWithoutJobSystemDelegate s_RunWithoutJobSystemDelegateFieldBurst;

				public void OriginalLambdaBody(ref Translation translation)
				{
					translation.Value += 5f;
				}

				[BurstCompile]
				public unsafe static void RunWithoutJobSystem(ArchetypeChunkIterator* archetypeChunkIterator, void* jobData)
				{
					(ref UnsafeUtilityEx.AsRef<System_OnUpdate_LambdaJob0>(jobData)).RunWithoutJobs(ref *archetypeChunkIterator);
				}

				public unsafe void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)
				{
					ElementProviders.Runtimes runtimes = _elementProviders.PrepareToExecuteOnEntitiesInMethod(ref chunk, chunkIndex, firstEntityIndex);
					_runtimes = &runtimes;
					IterateEntities(ref chunk, ref *_runtimes);
				}

				public void IterateEntities(ref ArchetypeChunk chunk, ref ElementProviders.Runtimes runtimes)
				{
					int count = chunk.Count;
					for (int i = 0; i != count; i++)
					{
						OriginalLambdaBody(ref runtimes.runtime0.For(i));
					}
				}

				public void ScheduleTimeInitialize(JobComponentSystem jobComponentSystem)
				{
					_elementProviders.ScheduleTimeInitialize(jobComponentSystem);
				}
			}

			private EntityQuery <>System_OnUpdate_LambdaJob0_entityQuery;

			protected unsafe override JobHandle OnUpdate(JobHandle inputDeps)
			{
				ForEachLambdaJobDescription entity = base.Entities;
				System_OnUpdate_LambdaJob0 jobData = default(System_OnUpdate_LambdaJob0);
				jobData.ScheduleTimeInitialize(this);
				InternalCompilerInterface.RunJobChunk(jobData, <>System_OnUpdate_LambdaJob0_entityQuery, JobsUtility.JobCompilerEnabled ? System_OnUpdate_LambdaJob0.s_RunWithoutJobSystemDelegateFieldBurst : System_OnUpdate_LambdaJob0.s_RunWithoutJobSystemDelegateFieldNoBurst);
				return default(JobHandle);
			}

			public static EntityQuery <>GetEntityQuery_ForSystem_OnUpdate_LambdaJob0_From(ComponentSystemBase componentSystem)
			{
				EntityQueryDesc[] array = new EntityQueryDesc[1];
				(array[0] = new EntityQueryDesc()).All = new ComponentType[1]
				{
					ComponentType.ReadWrite<Translation>()
				};
				return componentSystem.GetEntityQuery(array);
			}

			protected unsafe override void OnCreate()
			{
				System_OnUpdate_LambdaJob0.s_RunWithoutJobSystemDelegateFieldNoBurst = System_OnUpdate_LambdaJob0.RunWithoutJobSystem;
				System_OnUpdate_LambdaJob0.s_RunWithoutJobSystemDelegateFieldBurst = InternalCompilerInterface.BurstCompile(System_OnUpdate_LambdaJob0.s_RunWithoutJobSystemDelegateFieldNoBurst);
				<>System_OnUpdate_LambdaJob0_entityQuery = <>GetEntityQuery_ForSystem_OnUpdate_LambdaJob0_From(this);
			}
		}

		[Test]
		public void EntitiesForEachNonCapturingTest()
		{
			RunTest<System>();
		}
	}
}
